{"version":3,"sources":["../../../src/components/config/dsUpgrade.js"],"names":["getDatasourceByName","datasources","name","_","isArray","find","DatasourceUpgrader","contextSrv","backendSrv","$q","datasourceSrv","apiKey","keyRequest","upgradeed","upgraded","getAll","raintank","exec","url","raintankEvents","hasRole","canUpgrade","configureDatasource","when","self","get","then","resp","meta","code","reject","body","results","graphite","elastic","forEach","ds","getDatasources","promise","type","access","basicAuth","basicAuthPassword","basicAuthUser","jsonData","getKey","post","isMatch","put","id","merge","database","esVersion","interval","timeField","datasourceConfig","settings","init","result"],"mappings":"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","file":"dsUpgrade.js","sourcesContent":["import _ from 'lodash';\n\nexport default class DatasourceUpgrader {\n  constructor(contextSrv, backendSrv, $q, datasourceSrv) {\n    this.backendSrv = backendSrv;\n    this.contextSrv = contextSrv;\n    this.datasourceSrv = datasourceSrv;\n    this.$q = $q;\n    this.apiKey = \"\";\n    this.keyRequest = null;\n    this.upgradeed = false;\n  }\n\n  needsUpgrade() {\n    if (this.upgraded) {\n      return false;\n    }\n\n    if (!this.datasourceSrv) {\n      return false;\n    }\n\n    const datasources = this.datasourceSrv.getAll();\n\n    const raintank = getDatasourceByName(datasources, 'raintank');\n\n    if (!raintank || !/^\\/api\\/datasources\\/proxy/.exec(raintank.url)) {\n      return true;\n    }\n\n    const raintankEvents = getDatasourceByName(datasources, 'raintankEvents');\n\n    if (!raintankEvents || !/^\\/api\\/datasources\\/proxy/.exec(raintankEvents.url)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  canUpgrade() {\n    // only admins can modify datasources.\n    return this.contextSrv.hasRole(\"Admin\");\n  }\n\n  upgrade() {\n    if (this.canUpgrade()) {\n      return this.configureDatasource();\n    } else {\n      return this.$q.when();\n    }\n  }\n\n  getKey() {\n    // if we have already fetched the key, they just return it.\n    if (this.apiKey !== \"\") {\n      return this.$q.when(this.apiKey);\n    }\n    // if we are currently fetching the key, then just return the promise.\n    // when it resolves, it will provide the key.\n    if (this.keyRequest) {\n      return this.keyRequest;\n    }\n\n    // fetch the key from the worldping-api\n    var self = this;\n    this.keyRequest = this.backendSrv.get('api/plugin-proxy/raintank-worldping-app/_key')\n    .then((resp) => {\n      if (resp.meta.code !== 200) {\n        return self.$q.reject(\"failed to get current apiKey\");\n      }\n      return resp.body.apiKey;\n    });\n    return this.keyRequest;\n  }\n\n  getDatasources() {\n    var self = this;\n    //check for existing datasource.\n    return self.backendSrv.get('/api/datasources')\n    .then((results) => {\n      var datasources = {\n        graphite: null,\n        elastic: null\n      };\n      _.forEach(results, function(ds) {\n        if (ds.name === \"raintank\") {\n          datasources.graphite = ds;\n        }\n        if (ds.name === \"raintankEvents\") {\n          datasources.elastic = ds;\n        }\n      });\n      return datasources;\n    });\n  }\n\n  configureDatasource() {\n    var self = this;\n    //check for existing datasource.\n    return this.getDatasources().then((datasources) => {\n      var promise = self.$q.when();\n\n      var graphite = {\n        name: 'raintank',\n        type: 'graphite',\n        url: 'https://tsdb-gw.raintank.io/graphite/',\n        access: 'proxy',\n        basicAuth: true,\n        basicAuthPassword: \"\",\n        basicAuthUser: \"\",\n        jsonData: {}\n      };\n      if (!datasources.graphite) {\n        // create datasource.\n        promise = promise.then(() => self.getKey().then((apiKey) => {\n          graphite.basicAuthUser = \"api_key\";\n          graphite.basicAuthPassword = apiKey;\n          return self.backendSrv.post('/api/datasources', graphite);\n        }));\n      } else if (!_.isMatch(datasources.graphite, graphite)) {\n        // update datasource if necessary\n        promise = promise.then(() => self.getKey().then((apiKey) => {\n          graphite.basicAuthUser = \"api_key\";\n          graphite.basicAuthPassword = apiKey;\n          return self.backendSrv.put('/api/datasources/' + datasources.graphite.id, _.merge({}, datasources.graphite, graphite));\n        }));\n      }\n\n      var elastic = {\n        name: 'raintankEvents',\n        type: 'elasticsearch',\n        url: 'https://tsdb-gw.raintank.io/elasticsearch/',\n        access: 'proxy',\n        basicAuth: true,\n        basicAuthPassword: \"\",\n        basicAuthUser: \"\",\n        database: '[events-]YYYY-MM-DD',\n        jsonData: {\n          esVersion: 2,\n          interval: \"Daily\",\n          timeField: \"timestamp\"\n        }\n      };\n\n      if (!datasources.elastic) {\n        // create datasource.\n        promise = promise.then(() => self.getKey().then((apiKey) => {\n          elastic.basicAuthUser = \"api_key\";\n          elastic.basicAuthPassword = apiKey;\n          return self.backendSrv.post('/api/datasources', elastic);\n        }));\n      } else if (!_.isMatch(datasources.elastic, elastic)) {\n        // update datasource if necessary\n        promise = promise.then(() => self.getKey().then((apiKey) => {\n          elastic.basicAuthUser = \"api_key\";\n          elastic.basicAuthPassword = apiKey;\n          return self.backendSrv.put('/api/datasources/' + datasources.elastic.id, _.merge({}, datasources.elastic, elastic));\n        }));\n      }\n\n      return promise;\n    }).then(result => {\n      self.upgraded = true;\n\n      return this.backendSrv.get('/api/frontend/settings').then(settings => {\n        // update datasource config\n        var datasourceConfig = this.datasourceSrv.getAll();\n        datasourceConfig.raintank = settings.datasources.raintank;\n        datasourceConfig.raintankEvents = settings.datasources.raintankEvents;\n        this.datasourceSrv.init();\n\n        return result;\n      });\n    });\n  }\n}\n\nfunction getDatasourceByName(datasources, name) {\n  if (_.isArray(datasources)) {\n    return _.find(datasources, { name });\n  } else {\n    return datasources[name];\n  }\n}\n"]}